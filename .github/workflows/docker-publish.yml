name: Docker Multi-Image CI

on:
  push:
    branches: ["main"]
    tags: ["v*.*.*"]
  pull_request:
    branches: ["main"]
    types: [opened, synchronize, closed]

env:
  REGISTRY: docker.io
  IMAGE1_NAME: beadsworth/hls-dummy-streams-generator
  IMAGE2_NAME: beadsworth/hls-dummy-streams-nginx

jobs:
  build:
    if: github.event_name != 'pull_request' || github.event.action != 'closed'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      # 1. Checkout repository
      - name: Checkout
        uses: actions/checkout@v4

      # 2. Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3. Login to Docker Hub
      - name: Docker Hub login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 4. Determine image tags
      - name: Set image tags
        run: |
          if [ "$GITHUB_EVENT_NAME" = "pull_request" ]; then
            echo "PR_TAG=pr-${GITHUB_SHA:0:8}" >> $GITHUB_ENV
            echo "IMAGE1_TAG=${REGISTRY}/${IMAGE1_NAME}:pr-${GITHUB_SHA:0:8}" >> $GITHUB_ENV
            echo "IMAGE2_TAG=${REGISTRY}/${IMAGE2_NAME}:pr-${GITHUB_SHA:0:8}" >> $GITHUB_ENV
          else
            echo "IMAGE1_TAG=${REGISTRY}/${IMAGE1_NAME}:latest" >> $GITHUB_ENV
            echo "IMAGE2_TAG=${REGISTRY}/${IMAGE2_NAME}:latest" >> $GITHUB_ENV
          fi
        shell: bash
        env:
          REGISTRY: ${{ env.REGISTRY }}
          IMAGE1_NAME: ${{ env.IMAGE1_NAME }}
          IMAGE2_NAME: ${{ env.IMAGE2_NAME }}

      # 5. Build and push Image1
      - name: Build and push Image1
        uses: docker/build-push-action@v5
        with:
          context: ./generator
          push: true
          tags: ${{ env.IMAGE1_TAG }}
          cache-from: |
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE1_NAME }}:latest,allow=missing
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE1_NAME }}:${{ github.sha }},allow=missing
          cache-to: |
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE1_NAME }}:latest,mode=max
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE1_NAME }}:${{ github.sha }},mode=max

      # 6. Build and push Image2
      - name: Build and push Image2
        uses: docker/build-push-action@v5
        with:
          context: ./nginx
          push: true
          tags: ${{ env.IMAGE2_TAG }}
          cache-from: |
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE2_NAME }}:latest,allow=missing
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE2_NAME }}:${{ github.sha }},allow=missing
          cache-to: |
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE2_NAME }}:latest,mode=max
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE2_NAME }}:${{ github.sha }},mode=max

      # 7. Install cosign (needed before signing)
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3.5.0
        with:
          cosign-release: 'v2.2.4'

      # 8. Sign images
      - name: Sign Image1
        if: github.event_name != 'pull_request'
        run: cosign sign --yes ${{ env.IMAGE1_TAG }}

      - name: Sign Image2
        if: github.event_name != 'pull_request'
        run: cosign sign --yes ${{ env.IMAGE2_TAG }}

  # Cleanup PR images
  cleanup:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Docker Hub login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Delete temporary PR Image1
        run: |
          PR_TAG=pr-${GITHUB_SHA:0:8}
          curl -s -X DELETE -u "${{ secrets.DOCKERHUB_USERNAME }}:${{ secrets.DOCKERHUB_TOKEN }}" \
            "https://hub.docker.com/v2/repositories/${{ env.IMAGE1_NAME }}/tags/$PR_TAG/"

      - name: Delete temporary PR Image2
        run: |
          PR_TAG=pr-${GITHUB_SHA:0:8}
          curl -s -X DELETE -u "${{ secrets.DOCKERHUB_USERNAME }}:${{ secrets.DOCKERHUB_TOKEN }}" \
            "https://hub.docker.com/v2/repositories/${{ env.IMAGE2_NAME }}/tags/$PR_TAG/"
